// src/components/CrosswordGame.js
import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import "./CrosswordGame.css";

const CrosswordGame = () => {
  // Define the crossword grid structure (20x20)
  // 'X' represents a filled cell; 'O' represents a cell that will contain a number
  const initialGrid = [
    [
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "X",
      "O",
      "O",
      "X",
    ],
    [
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
    ],
    [
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
    ],
    [
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
    ],
    [
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
    ],
    [
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
    ],
    [
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
    ],
    [
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
    ],
    [
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
    ],
    [
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
    ],
    [
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
    [
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
      "X",
      "O",
      "O",
      "O",
      "X",
      "O",
      "X",
      "O",
      "O",
      "X",
      "O",
    ],
  ];

  // State for crossword grid numbers
  const [gridNumbers, setGridNumbers] = useState([]);

  // Helper function to generate sequential numbers for the 'O' cells
  const fillSequentialNumbers = () => {
    let number = 1;
    const newGridNumbers = initialGrid.map((row) =>
      row.map((cell) => {
        if (cell === "O") {
          return number++;
        }
        return null;
      })
    );
    setGridNumbers(newGridNumbers);
  };

  // Fill the grid with sequential numbers on component mount
  useEffect(() => {
    fillSequentialNumbers();
  }, []);

  return (
    <div className="crossword-container">
      {/* Crossword Grid */}
      <motion.div
        className="crossword-grid"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1 }}
      >
        {gridNumbers.map((row, rowIndex) => (
          <div key={rowIndex} className="grid-row">
            {row.map((cell, cellIndex) => (
              <motion.div
                key={cellIndex}
                className={`grid-cell ${
                  initialGrid[rowIndex][cellIndex] === "X" ? "filled-cell" : ""
                }`}
              >
                {cell !== null ? cell : ""}
              </motion.div>
            ))}
          </div>
        ))}
      </motion.div>
    </div>
  );
};

export default CrosswordGame;
